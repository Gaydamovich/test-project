{"version":3,"sources":["components/info.js","components/form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","props","react_default","a","createElement","className","onClick","getWeather","Form","onSubmit","weatherMethod","type","name","placeholder","Weather","city","country","temp","pressure","sunset","error","API_KEY","App","state","undefined","_callee","regenerator_default","wrap","_context","prev","next","fetch","then","response","json","data","concat","sys","date","Date","setTime","sunset_date","getHours","getMinutes","_this","setState","Math","floor","main","stop","gettingWeather","_callee2","e","api_url","_context2","preventDefault","target","elements","value","sent","info","this","components_form","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRAUeA,EARF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAW,MAAOC,QAASL,EAAMM,YAAzC,uBCGWC,EAPF,SAAAP,GAAK,OAChBC,EAAAC,EAAAC,cAAA,QAAMK,SAAUR,EAAMS,eACpBR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3CX,EAAAC,EAAAC,cAAA,UAAQC,UAAW,WAAnB,iBCWWS,EAdC,SAAAb,GAAK,OACnBC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aACbJ,EAAMc,MACLb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,0BAAH,IAA4BH,EAAMc,KAAlC,KAA0Cd,EAAMe,SAChDd,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,6BAAH,IAA+BH,EAAMgB,MACrCf,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,0BAAH,IAA4BH,EAAMiB,UAClChB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,wBAAH,IAA0BH,EAAMkB,SAGpCjB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASJ,EAAMmB,SCN1BC,EAAU,mCAoGDC,6MA/FbC,MAAQ,CACNN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,KAGTjB,gCAAa,SAAAkB,IAAA,OAAAC,EAAAvB,EAAAwB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACVC,MAAM,sFACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIA,EAAKpB,OAClBiB,KAAK,SAAAjB,GACJgB,MAAK,oDAAAK,OAAqDrB,EAArD,WAAAqB,OAAmEf,EAAnE,kBACFW,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,IAAIhB,EAA2B,IAAlBgB,EAAKE,IAAIlB,OAClBmB,EAAO,IAAIC,KACfD,EAAKE,QAAQrB,GACb,IAAIsB,EAAcH,EAAKI,WAAa,KAAOJ,EAAKK,aAAe,GAAK,IAAML,EAAKK,aAAeL,EAAKK,cAEnGC,EAAKC,SAAS,CACZ5B,KAAM6B,KAAKC,MAAMZ,EAAKa,KAAK/B,MAAQ,OACnCF,KAAMoB,EAAKvB,KACXI,QAASmB,EAAKE,IAAIrB,QAClBE,SAAUiB,EAAKa,KAAK9B,SACpBC,OAAQsB,EACRrB,WAAOI,QAnBP,wBAAAI,EAAAqB,SAAAxB,QAyBbyB,qDAAiB,SAAAC,EAAOC,GAAP,IAAArC,EAAAsC,EAAAlB,EAAAhB,EAAAmB,EAAAG,EAAA,OAAAf,EAAAvB,EAAAwB,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,UACfsB,EAAEG,mBACExC,EAAOqC,EAAEI,OAAOC,SAAS1C,KAAK2C,OAFnB,CAAAJ,EAAAxB,KAAA,gBAAAwB,EAAAxB,KAAA,EAKSC,MAAK,oDAAAK,OAAqDrB,EAArD,WAAAqB,OAAmEf,EAAnE,kBALd,cAKPgC,EALOC,EAAAK,KAAAL,EAAAxB,KAAA,EAMMuB,EAAQnB,OANd,OAMPC,EANOmB,EAAAK,KAQTxC,EAA2B,IAAlBgB,EAAKE,IAAIlB,QAClBmB,EAAO,IAAIC,MACVC,QAAQrB,GACTsB,EAAcH,EAAKI,WAAa,KAAOJ,EAAKK,aAAe,GAAK,IAAML,EAAKK,aAAeL,EAAKK,cAEnGC,EAAKC,SAAS,CACZ5B,KAAM6B,KAAKC,MAAMZ,EAAKa,KAAK/B,MAAQ,OACnCF,KAAMoB,EAAKvB,KACXI,QAASmB,EAAKE,IAAIrB,QAClBE,SAAUiB,EAAKa,KAAK9B,SACpBC,OAAQsB,EACRrB,WAAOI,IAnBI8B,EAAAxB,KAAA,iBAsBbc,EAAKC,SAAS,CACZ5B,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,qIA5BI,yBAAAkC,EAAAL,SAAAE,oIAkCf,OACEjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACwD,EAAD,CAAMrD,WAAcsD,KAAKtD,cAE3BL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACfH,EAAAC,EAAAC,cAAC0D,EAAD,CAAMpD,cAAiBmD,KAAKX,iBAC5BhD,EAAAC,EAAAC,cAAC2D,EAAD,CACE9C,KAAQ4C,KAAKtC,MAAMN,KACnBF,KAAQ8C,KAAKtC,MAAMR,KACnBC,QAAW6C,KAAKtC,MAAMP,QACtBE,SAAY2C,KAAKtC,MAAML,SACvBC,OAAU0C,KAAKtC,MAAMJ,OACrBC,MAASyC,KAAKtC,MAAMH,oBAtFlB4C,IAAMC,uBCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOtE,EAAAC,EAAAC,cAACqE,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK,SAAA+C,GACjCA,EAAaC","file":"static/js/main.f25a337e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Info = props => (\n  <div>\n    <h2>Weather in your city</h2>\n    <p>have a nice day</p>\n    <button className={'btn'} onClick={props.getWeather}>Weather in your..</button>\n  </div>\n);\n\nexport default Info;\n","import React from 'react';\n\nconst Form = props => (\n  <form onSubmit={props.weatherMethod}>\n    <input type=\"text\" name=\"city\" placeholder=\"Город\"/>\n    <button className={'btn_get'}>Get weather</button>\n  </form>\n)\n\nexport default Form;\n","import React from 'react';\n\nconst Weather = props => (\n  <div className= \"infoWeath\">\n    {props.city &&\n      <div>\n        <p><span>Locality: </span> {props.city}, {props.country}</p>\n        <p><span>Temperature: </span> {props.temp}</p>\n        <p><span>Pressure: </span> {props.pressure}</p>\n        <p><span>Sunset: </span> {props.sunset}</p>\n      </div>\n    }\n    <p className=\"error\">{props.error}</p>\n  </div>\n);\n\nexport default Weather;\n","import React from 'react';\nimport Info from './components/info';\nimport Form from './components/form';\nimport Weather from './components/Weather';\n\n\nconst API_KEY = \"f74e9feab96e7ff568de1200cd9cdb77\";\n\n\nclass App extends React.Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    sunset: undefined,\n    error: undefined\n  };\n  \n  getWeather = async () =>{\n     fetch('https://api.ipgeolocation.io/ipgeo?apiKey=50a5b791e5c6400da962f8548caac2c7&lang=ru')\n       .then(response => response.json())\n       .then(data => data.city)\n       .then(city => {\n         fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`)\n           .then(response => response.json())\n           .then(data => {\n             let sunset = data.sys.sunset * 1000;\n             let date = new Date();\n             date.setTime(sunset);\n             let sunset_date = date.getHours() + \":\" + (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes());\n  \n             this.setState({\n               temp: Math.floor(data.main.temp) + '°',\n               city: data.name,\n               country: data.sys.country,\n               pressure: data.main.pressure,\n               sunset: sunset_date,\n               error: undefined\n             })\n           })\n       })\n   }\n  \n  gettingWeather = async (e) => {\n    e.preventDefault();\n    let city = e.target.elements.city.value;\n    \n    if (city) {\n      const api_url = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n      const data = await api_url.json();\n\n      let sunset = data.sys.sunset * 1000;\n      let date = new Date();\n      date.setTime(sunset);\n      let sunset_date = date.getHours() + \":\" + (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes());\n      \n      this.setState({\n        temp: Math.floor(data.main.temp) + '°',\n        city: data.name,\n        country: data.sys.country,\n        pressure: data.main.pressure,\n        sunset: sunset_date,\n        error: undefined\n      });\n    } else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        sunset: undefined,\n        error: \"Введите название города\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-sm-5 info\">\n                <Info getWeather = {this.getWeather}/>\n              </div>\n              <div className=\"col-sm-7 form\">\n              <Form weatherMethod = {this.gettingWeather}/>\n              <Weather\n                temp = {this.state.temp}\n                city = {this.state.city}\n                country = {this.state.country}\n                pressure = {this.state.pressure}\n                sunset = {this.state.sunset}\n                error = {this.state.error}\n              />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}